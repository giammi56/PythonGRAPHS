// PECD_graphs.cpp : Defines the entry point for the console application.
//
#define _CRT_SECURE_NO_WARNINGS
#include "stdafx.h"
#include <atlstr.h>

#include <TApplication.h>

#include <TDirectory.h>
#include <TCanvas.h>
#include <TF1.h>
#include <TFile.h>
#include <TGraphAsymmErrors.h>
#include <TGraph2D.h>
#include <THistPainter.h>
#include <THStack.h>
#include <TH2.h>
#include <TH1.h>
#include <TLegend.h>
#include <TNamed.h>
#include <TPad.h>
#include <TPaveLabel.h>
#include <TRandom.h>
#include <TRefArray.H>
#include <TStyle.h>
#include <TString.h>
#include <TSystem.h>
#include <TText.h>
#include <TTree.h>
#include <TPaveText.h>
#include <TPaveStats.h>
#include <TError.h>

#include <iostream>
using namespace std;
#include <vector>


void DrawTextInPad(double xCoord, double yCoord, char* text, Float_t size) {
	TText* t1 = new TText(xCoord, yCoord, text);
	t1->SetNDC();
	t1->SetTextColor(1);
	t1->SetTextSize(size);
	t1->SetTextFont(62);
	t1->Draw();
}

// TAKE CARE THAT THE FEEDING PARAMETERS ARE IN TEH SAME ORDER!!!
void load_TH1D(TFile* S_LFile, TFile* S_RFile, TFile* R_LFile, TFile* R_RFile, TH1D** S_LCP_TH1D_Array, TH1D** S_RCP_TH1D_Array, TH1D** R_LCP_TH1D_Array, TH1D** R_RCP_TH1D_Array, TH1D** general_Array, TString* dirlist, TString* histlist1D, const char dir[]) {
	int counter = 0;
	int i = 0;
	//TDirectoryFile* LCPDir = (TDirectoryFile*)(LCPFile->GetDirectory("angular_distr_el/if_twoelec"+dirlist[i]));
	TDirectory* S_Ldir = (TDirectory*)(S_LFile->GetDirectory(dir+dirlist[i]));
	TDirectory* S_Rdir = (TDirectory*)(S_RFile->GetDirectory(dir+dirlist[i]));
	TDirectory* R_Ldir = (TDirectory*)(R_LFile->GetDirectory(dir+dirlist[i]));
	TDirectory* R_Rdir = (TDirectory*)(R_RFile->GetDirectory(dir+dirlist[i]));
	gDirectory->pwd();
	//for (int j = 0; j < LCPhistlist->Sizeof(); j++) {
	
	//12x6
	for (int j=0;j<72;j++) {
	////4x4
	//for (int j=0;j<16;j++) {
	////3x3
	//for (int j=0;j<9;j++) {
		S_LCP_TH1D_Array[j]=(TH1D*)S_Ldir->FindObjectAny(histlist1D[j]);
		S_LCP_TH1D_Array[j]->SetName("S_LCP");
		S_LCP_TH1D_Array[j]->SetTitle("S_LCP");
		S_LCP_TH1D_Array[j]->Sumw2();
		S_LCP_TH1D_Array[j]->Scale(1. / S_LCP_TH1D_Array[j]->Integral());
		std::cout << "Loading and normalisation of " << S_LCP_TH1D_Array[j]->GetName() << "/" << histlist1D[j] << " done! # entries = " << S_LCP_TH1D_Array[j]->GetEntries() << "\n";

		general_Array[counter++] = S_LCP_TH1D_Array[j];										


		S_RCP_TH1D_Array[j]=(TH1D*)S_Rdir->FindObjectAny(histlist1D[j]);				 
		S_RCP_TH1D_Array[j]->SetName("S_RCP");								 
		S_RCP_TH1D_Array[j]->SetTitle("S_RCP");								 
		S_RCP_TH1D_Array[j]->Sumw2();													 
		S_RCP_TH1D_Array[j]->Scale(1. / S_RCP_TH1D_Array[j]->Integral());			 
		std::cout << "Loading and normalisation of " << S_RCP_TH1D_Array[j]->GetName() << "/" << histlist1D[j] << " done! # entries = " << S_RCP_TH1D_Array[j]->GetEntries() << "\n";

		general_Array[counter++] = S_RCP_TH1D_Array[j];									 

		R_LCP_TH1D_Array[j] = (TH1D*)R_Ldir->FindObjectAny(histlist1D[j]);				 
		R_LCP_TH1D_Array[j]->SetName("R_LCP");								 
		R_LCP_TH1D_Array[j]->SetTitle("R_LCP");								 
		R_LCP_TH1D_Array[j]->Sumw2();													 
		R_LCP_TH1D_Array[j]->Scale(1. / R_LCP_TH1D_Array[j]->Integral());			 
		std::cout << "Loading and normalisation of " << R_LCP_TH1D_Array[j]->GetName() << "/" << histlist1D[j] << " done! # entries = " << R_LCP_TH1D_Array[j]->GetEntries() << "\n";

		general_Array[counter++] = R_LCP_TH1D_Array[j];									 

		R_RCP_TH1D_Array[j] = (TH1D*)R_Rdir->FindObjectAny(histlist1D[j]);				 
		R_RCP_TH1D_Array[j]->SetName("R_RCP");								 
		R_RCP_TH1D_Array[j]->SetTitle("R_RCP");								 
		R_RCP_TH1D_Array[j]->Sumw2();													 
		R_RCP_TH1D_Array[j]->Scale(1. / R_RCP_TH1D_Array[j]->Integral());			 
		std::cout << "Loading and normalisation of " << R_RCP_TH1D_Array[j]->GetName() << "/" << histlist1D[j] << " done! # entries = " << R_RCP_TH1D_Array[j]->GetEntries() << "\n";

		general_Array[counter++] = R_RCP_TH1D_Array[j];
	}

	std::cout << "Total number of TH1D histos = " << counter << "\n";

	//Autoput of all loaded graphs
	char canvastitle[100];
	std::printf(canvastitle, "all entries = %d", counter);

	//plotting all cos(theta) plots
	TCanvas* c56 = new TCanvas("all S_LCP TH1D histos", canvastitle, sizeof(general_Array));
	c56->SetCanvasSize(1920, 1080);
	c56->SetWindowSize(1920+4, 1080+28);
	c56->SetBatch(kTRUE); // to suppress graphical putput

	//12x6
	c56->Divide(12,6);
	for (int k=0; k<72; k++) {
	//// 4x4
	//c56->Divide(16,4);
	//for (int k=0; k<64; k++) {	
	//// 3x3
	//c56->Divide(9,4);
	//for (int k=0; k<36; k++) {
		c56->cd(k*4+1);
		//general_Array[k]->SetOption("E");
		general_Array[k]->Draw("E1");
		//gPad->Modified();
		gPad->Update();
	}
	//list->Add(c56);
	c56->SetBatch(kFALSE); // to suppress graphical putput

	TCanvas* c57 = new TCanvas("all S_RCP TH1D histos", canvastitle, sizeof(general_Array));
	c57->SetCanvasSize(1920, 1080);
	c57->SetWindowSize(1920+4, 1080+28);
	c57->SetBatch(kTRUE); // to suppress graphical putput

	c57->Divide(12,6);
	for (int k=0; k<72; k++) {
		c57->cd(k*4+2);
		general_Array[k]->Draw("E1");
		gPad->Update();
	}
	c57->SetBatch(kFALSE); // to suppress graphical putput

	TCanvas* c58 = new TCanvas("all R_LCP TH1D histos", canvastitle, sizeof(general_Array));
	c58->SetCanvasSize(1920, 1080);
	c58->SetWindowSize(1920+4, 1080+28);
	c58->SetBatch(kTRUE); // to suppress graphical putput

	c58->Divide(12,6);
	for (int k=0; k<72; k++) {
		c58->cd(k*4+3);
		general_Array[k]->Draw("E1");
		gPad->Update();
	}
	c58->SetBatch(kFALSE); // to suppress graphical putput

	TCanvas* c59 = new TCanvas("all R_RCP TH1D histos", canvastitle, sizeof(general_Array));
	c59->SetCanvasSize(1920, 1080);
	c59->SetWindowSize(1920+4, 1080+28);
	c59->SetBatch(kTRUE); // to suppress graphical putput

	c59->Divide(12,6);
	for (int k=0; k<72; k++) {
		c59->cd(k*4+4);
		general_Array[k]->Draw("E1");
		gPad->Update();
	}
	c59->SetBatch(kFALSE); // to suppress graphical putput

	c56->Write();
	c57->Write();
	c58->Write();
	c59->Write();
	std::cout << "\n";
	return;
}

void load_TH2D(TFile* S_LFile, TFile* S_RFile, TFile* R_LFile, TFile* R_RFile, TH2D** S_LCP_TH2D_Array, TH2D** S_RCP_TH2D_Array, TH2D** R_LCP_TH2D_Array, TH2D** R_RCP_TH2D_Array, TH2D** general_Array2D, TString* dirlist, TString* histlist2D, const char dir[]) {

	int counter = 0;
	int i = 0;
	//TDirectoryFile* LCPDir = (TDirectoryFile*)(LCPFile->GetDirectory("angular_distr_el/if_twoelec"+dirlist[i]));
	TDirectory* S_Ldir = (TDirectory*)(S_LFile->GetDirectory(dir+dirlist[i]));
	TDirectory* S_Rdir = (TDirectory*)(S_RFile->GetDirectory(dir+dirlist[i]));
	TDirectory* R_Ldir = (TDirectory*)(R_LFile->GetDirectory(dir+dirlist[i]));
	TDirectory* R_Rdir = (TDirectory*)(R_RFile->GetDirectory(dir+dirlist[i]));
	gDirectory->pwd();

	for (int j=0;j<72;j++) {

		//*3 depends on the size of dirlist
		S_LCP_TH2D_Array[j+i*2]=(TH2D*)S_Ldir->FindObjectAny(histlist2D[j]);
		S_LCP_TH2D_Array[j+i*2]->SetName("S_LCP"+dirlist[i]);
		S_LCP_TH2D_Array[j+i*2]->SetTitle("S_LCP"+dirlist[i]);
		//S_LCP_TH2D_Array[j+i*3]->Sumw2();
		normalize_TH2D(S_LCP_TH2D_Array[j]);
		general_Array2D[counter++] = S_LCP_TH2D_Array[j];									 


		S_RCP_TH2D_Array[j+i*2]=(TH2D*)S_Rdir->FindObjectAny(histlist2D[j]);				 
		S_RCP_TH2D_Array[j+i*2]->SetName("S_RCP"+dirlist[i]);								 
		S_RCP_TH2D_Array[j+i*2]->SetTitle("S_RCP"+dirlist[i]);								 
		//S_RCP_TH2D_Array[j+i*3]->Sumw2();													 
		normalize_TH2D(S_RCP_TH2D_Array[j]);
		general_Array2D[counter++] = S_RCP_TH2D_Array[j];									 

		R_LCP_TH2D_Array[j+i*2] = (TH2D*)R_Ldir->FindObjectAny(histlist2D[j]);				 
		R_LCP_TH2D_Array[j+i*2]->SetName("R_LCP"+dirlist[i]);								 
		R_LCP_TH2D_Array[j+i*2]->SetTitle("R_LCP"+dirlist[i]);								 
		//R_LCP_TH2D_Array[j+i*3]->Sumw2();													 
		normalize_TH2D(R_LCP_TH2D_Array[j]);
		general_Array2D[counter++] = R_LCP_TH2D_Array[j];									 

		R_RCP_TH2D_Array[j+i*2] = (TH2D*)R_Rdir->FindObjectAny(histlist2D[j]);				 
		R_RCP_TH2D_Array[j+i*2]->SetName("R_RCP"+dirlist[i]);								 
		R_RCP_TH2D_Array[j+i*2]->SetTitle("R_RCP"+dirlist[i]);								 
		//R_RCP_TH2D_Array[j+i*3]->Sumw2();													 
		normalize_TH2D(R_RCP_TH2D_Array[j]);
		general_Array2D[counter++] = R_RCP_TH2D_Array[j];
	}

	std::cout << "Total number of TH2D histos = " << counter << "\n";

	char canvastitle_2D[100];
	std::printf(canvastitle_2D, "cos(theta); \t cos(theta)_red; \t all entries = %d", counter);

	TCanvas* c60 = new TCanvas("all full S_LCP TH2 histos", canvastitle_2D);
	c60->SetCanvasSize(1920, 1080);
	c60->SetWindowSize(1920+4, 1080+28);
	c60->Divide(12,6);
	for (int k=0; k<72; k++) {
		c60->cd(k*4+1);
		//general_Array[k]->SetOption("E");
		general_Array2D[k]->Draw("COLZ");
		//gPad->Modified();
		gPad->Update();
	}

	TCanvas* c61 = new TCanvas("all full S_RCP TH2 histos", canvastitle_2D);
	c61->SetCanvasSize(1920, 1080);
	c61->SetWindowSize(1920+4, 1080+28);
	c61->Divide(12,6);
	for (int k=0; k<72; k++) {
		c61->cd(k*4+2);
		//general_Array[k]->SetOption("E");
		general_Array2D[k+72*1]->Draw("COLZ");
		//gPad->Modified();
		gPad->Update();
	}

	TCanvas* c62 = new TCanvas("all full R_LCP TH2 histos", canvastitle_2D);
	c62->SetCanvasSize(1920, 1080);
	c62->SetWindowSize(1920+4, 1080+28);
	c62->Divide(12,6);
	for (int k=0; k<72; k++) {
		c62->cd(k*4+3);
		//general_Array[k]->SetOption("E");
		general_Array2D[k+72*2]->Draw("COLZ");
		//gPad->Modified();
		gPad->Update();
	}

	TCanvas* c63 = new TCanvas("all full R_RCP TH2 histos", canvastitle_2D);
	c63->SetCanvasSize(1920, 1080);
	c63->SetWindowSize(1920+4, 1080+28);
	c63->Divide(12,6);
	for (int k=0; k<72; k++) {
		c63->cd(k*4+4);
		//general_Array[k]->SetOption("E");
		general_Array2D[k+72*3]->Draw("COLZ");
		//gPad->Modified();
		gPad->Update();
	}
	//list->Add(c56);
	c60->Write();
	c61->Write();
	c62->Write();
	c63->Write();
	std::cout << "\n";

	return;

}

TGraphAsymmErrors* ratio_TH1D(TH1D* &Working_Array_1, TH1D* &Working_Array_2, const char* &cname) {

	int a = Working_Array_1->GetNbinsX();
	//std::cout << "a = " << a << "\n";
	// Asymmetry = (h1 - h2)/(h1 + h2)  where h1 = this
	auto ratioTH1D = new TGraphAsymmErrors(a);
	// https://en.wikipedia.org/wiki/Poisson_distribution#Assumptions:_When_is_the_Poisson_distribution_an_appropriate_model? //
	// second option in Divide() midp = lancaster mid-p_value, n = normal propagation
	ratioTH1D->Divide(Working_Array_1, Working_Array_2, "pois n");
	std::printf("Division of %s and %s in %s: DONE! Size ratio vector = %d \n",Working_Array_1->GetTitle(), Working_Array_2->GetTitle(), cname, ratioTH1D->Sizeof()/sizeof(int));

	return ratioTH1D;
}

TH2D* ratio_TH2D(TH2D* &LCP_TH2D_array, TH2D* &RCP_TH2D_array, const char* &cname) {

	TH2D* ratioTH2D = (TH2D*)LCP_TH2D_array->GetAsymmetry(RCP_TH2D_array);
	//std::cout << "Size of ratioTH2D: " << (ratioTH2D->Sizeof())/sizeof(int) << "\n";
	std::cout << "Division TH2D DONE!" << "\n";

	return ratioTH2D;
}

void normalize_TH2D(TH2D* TH2D_Array) {

	Double_t norm = 1. / TH2D_Array->Integral();
	TH2D_Array->Scale(norm);
	std::cout << TH2D_Array->GetName() << ": TH2D normalized" << "\n \n";

	return;
}

int main(int argc, char **argv)

{
	TApplication theApp("App", &argc, argv);

	// single TH1D arrays: adapt to the requested dimension i*j
	int dim = 288; //12x6x4
	TH1D** S_LCP_TH1D_Array;
	S_LCP_TH1D_Array = new TH1D*[dim/4];

	TH1D** R_LCP_TH1D_Array;
	R_LCP_TH1D_Array = new TH1D*[dim/4];

	TH1D** S_RCP_TH1D_Array;
	S_RCP_TH1D_Array = new TH1D*[dim/4];

	TH1D** R_RCP_TH1D_Array;
	R_RCP_TH1D_Array = new TH1D*[dim/4];

	TH1D** Working_Array_1;
	Working_Array_1 = new TH1D*[dim];

	TH1D** Working_Array_2;
	Working_Array_2 = new TH1D*[dim];

	TH1D** general_Array;
	general_Array = new TH1D*[dim];

	TGraphAsymmErrors** ratio_genarray;
	ratio_genarray = new TGraphAsymmErrors*[dim];

	// TH2D arrays!!!
	TH2D** S_LCP_TH2D_Array;
	S_LCP_TH2D_Array = new TH2D*[dim/4];

	TH2D** R_LCP_TH2D_Array;
	R_LCP_TH2D_Array = new TH2D*[dim/4];

	TH2D** S_RCP_TH2D_Array;
	S_RCP_TH2D_Array = new TH2D*[dim/4];

	TH2D** R_RCP_TH2D_Array;
	R_RCP_TH2D_Array = new TH2D*[dim/4];

	TH2D** general_Array2D;
	general_Array2D = new TH2D*[dim];

	TH2D** ratioTH2D;
	ratioTH2D = new TH2D*[dim];

	// Fititign parameters
	TF1** fit1;
	fit1 = new TF1*[];
	// fit1[i] = TF1("ols_lin", "[0]*x+[1]", -1, 1);; //Ordinary least squares fitting from /fitLinearRobust.C
	// fit1[i] = TF1("ols_lin", "pol1", -1, 1); //this should be equivalent at the expressio above

	//Adapt dimensio to request
	Double_t b1[288];
	Double_t b1_err[288];

	double cos_theta[288/4];
	double phi[288/4];

	TGraph2D** b1_map;
	b1_map = new TGraph2D*[3];

	// DO NOT CHANGE THE ORDER OF THESE INPUTS R-C3H3F3O_546eV_CL_10800-2350ns_multiCH11_MFPAD_30.root
	//546 eV
	TFile* S_LFile = new TFile("E:/Soleil_2018_09_SEX/Analysis/S-C3H3F3O_546eV_CL_10800-2350ns_multiCH11_MFPAD_30.root", "READ");
	if (S_LFile->IsOpen()) std::printf("%s: File opened successfully!\n", S_LFile->GetName());
	TFile* S_RFile = new TFile("E:/Soleil_2018_09_SEX/Analysis/S-C3H3F3O_546eV_CR_10800-2350ns_multiCH11_MFPAD_30.root", "READ");
	if (S_RFile->IsOpen()) std::printf("%s: File opened successfully!\n", S_RFile->GetName());
	TFile* R_LFile = new TFile("E:/Soleil_2018_09_SEX/Analysis/R-C3H3F3O_546eV_CL_10800-2350ns_multiCH11_MFPAD_30.root", "READ");
	if (R_LFile->IsOpen()) std::printf("%s: File opened successfully!\n", R_LFile->GetName());
	TFile* R_RFile = new TFile("E:/Soleil_2018_09_SEX/Analysis/R-C3H3F3O_546eV_CR_10800-2350ns_multiCH11_MFPAD_30.root", "READ");
	if (R_RFile->IsOpen()) std::printf("%s: File opened successfully!\n", R_RFile->GetName());
	
	//550eV
	//TFile* S_LFile = new TFile("E:/Soleil_2018_09_SEX/Analysis/S-C3H3F3O_550eV_CL_10800-2350ns_newEfield_multiCH11_MFPAD_30.root", "READ");
	//if (S_LFile->IsOpen()) std::printf("%s: File opened successfully!\n", S_LFile->GetName());
	//TFile* S_RFile = new TFile("E:/Soleil_2018_09_SEX/Analysis/S-C3H3F3O_550eV_CR_10800-2350ns_newEfield_multiCH11_MFPAD_30.root", "READ");
	//if (S_RFile->IsOpen()) std::printf("%s: File opened successfully!\n", S_RFile->GetName());
	//TFile* R_LFile = new TFile("E:/Soleil_2018_09_SEX/Analysis/R-C3H3F3O_550eV_CL_10800-2350ns_newEfield_multiCH11_MFPAD_30.root", "READ");
	//if (R_LFile->IsOpen()) std::printf("%s: File opened successfully!\n", R_LFile->GetName());
	//TFile* R_RFile = new TFile("E:/Soleil_2018_09_SEX/Analysis/R-C3H3F3O_550eV_CR_10800-2350ns_newEfield_multiCH11_MFPAD_30.root", "READ");
	//if (R_RFile->IsOpen()) std::printf("%s: File opened successfully!\n", R_RFile->GetName());

	//// DO NOT CHANGE THE ORDER OF THESE INPUTS
	//TFile* S_LFile = new TFile("E:/Soleil_2018_09_SEX/Analysis/POLY/S-C3H3F3O_poly_30-69m_550eV_CL_reaction_POLY_3x3_test.root", "READ");
	//if (S_LFile->IsOpen()) std::printf("%s: File opened successfully!\n", S_LFile->GetName());
	//TFile* S_RFile = new TFile("E:/Soleil_2018_09_SEX/Analysis/POLY/S-C3H3F3O_poly_30-69m_550eV_CR_reaction_POLY_3x3_test.root", "READ");
	//if (S_RFile->IsOpen()) std::printf("%s: File opened successfully!\n", S_RFile->GetName());
	//TFile* R_LFile = new TFile("E:/Soleil_2018_09_SEX/Analysis/POLY/R-C3H3F3O_poly_30-69m_550eV_CL_reaction_POLY_3x3_test.root", "READ");
	//if (R_LFile->IsOpen()) std::printf("%s: File opened successfully!\n", R_LFile->GetName());
	//TFile* R_RFile = new TFile("E:/Soleil_2018_09_SEX/Analysis/POLY/R-C3H3F3O_poly_30-69m_550eV_CR_reaction_POLY_3x3_test.root", "READ");
	//if (R_RFile->IsOpen()) std::printf("%s: File opened successfully!\n", R_RFile->GetName());

	//FILE NAME
	//POLIATOMIC - NEUTRAL
	TFile *f = new TFile("FMtox_546eV_ID_ALL_CH11m69_12x6.root","RECREATE");
	// POLYATOMIC - COMPLETE
	//TFile *f = new TFile("FMtox_ID_ALL_m69_3x3_test.root","RECREATE");
	//TFile *f = new TFile("FMtox_ID3_m41_69.root", "RECREATE");

	//File to save outout b1
	FILE *fp = fopen("b1_546eV_ID_ALL_CH11m69_12x8.dat","w");
	//FILE *fp = fopen("b1_ID_ALL_m69_3x3_test.dat","w");
	std::fprintf(fp,"cos(theta) \t phi \t p1 \t p1_err \n");
	
	if (f->IsOpen()) {
		std::printf("File CREATED successfully\n");
	}
	const char dir[] = {"angular_distr_el/ID_ALL_mol_e0_valid"};

	TString dirlist[1] = {"/EN_gate/MFPADs"};
	//12x6
	TString histlist1D[72] = { "cos(theta)_e[0]_costheta_-1.00_phi_-180","cos(theta)_e[0]_costheta_-0.67_phi_-180","cos(theta)_e[0]_costheta_-0.33_phi_-180","cos(theta)_e[0]_costheta_-0.00_phi_-180","cos(theta)_e[0]_costheta_0.33_phi_-180","cos(theta)_e[0]_costheta_0.67_phi_-180",
							   "cos(theta)_e[0]_costheta_-1.00_phi_-150","cos(theta)_e[0]_costheta_-0.67_phi_-150","cos(theta)_e[0]_costheta_-0.33_phi_-150","cos(theta)_e[0]_costheta_-0.00_phi_-150","cos(theta)_e[0]_costheta_0.33_phi_-150","cos(theta)_e[0]_costheta_0.67_phi_-150",
							   "cos(theta)_e[0]_costheta_-1.00_phi_-120","cos(theta)_e[0]_costheta_-0.67_phi_-120","cos(theta)_e[0]_costheta_-0.33_phi_-120","cos(theta)_e[0]_costheta_-0.00_phi_-120","cos(theta)_e[0]_costheta_0.33_phi_-120","cos(theta)_e[0]_costheta_0.67_phi_-120",
							   "cos(theta)_e[0]_costheta_-1.00_phi_-90", "cos(theta)_e[0]_costheta_-0.67_phi_-90", "cos(theta)_e[0]_costheta_-0.33_phi_-90", "cos(theta)_e[0]_costheta_-0.00_phi_-90", "cos(theta)_e[0]_costheta_0.33_phi_-90", "cos(theta)_e[0]_costheta_0.67_phi_-90",
							   "cos(theta)_e[0]_costheta_-1.00_phi_-60", "cos(theta)_e[0]_costheta_-0.67_phi_-60", "cos(theta)_e[0]_costheta_-0.33_phi_-60", "cos(theta)_e[0]_costheta_-0.00_phi_-60", "cos(theta)_e[0]_costheta_0.33_phi_-60", "cos(theta)_e[0]_costheta_0.67_phi_-60",
							   "cos(theta)_e[0]_costheta_-1.00_phi_-30", "cos(theta)_e[0]_costheta_-0.67_phi_-30", "cos(theta)_e[0]_costheta_-0.33_phi_-30", "cos(theta)_e[0]_costheta_-0.00_phi_-30", "cos(theta)_e[0]_costheta_0.33_phi_-30", "cos(theta)_e[0]_costheta_0.67_phi_-30",
							   "cos(theta)_e[0]_costheta_-1.00_phi_0",   "cos(theta)_e[0]_costheta_-0.67_phi_0",   "cos(theta)_e[0]_costheta_-0.33_phi_0",   "cos(theta)_e[0]_costheta_-0.00_phi_0",   "cos(theta)_e[0]_costheta_0.33_phi_0",   "cos(theta)_e[0]_costheta_0.67_phi_0",
							   "cos(theta)_e[0]_costheta_-1.00_phi_30",  "cos(theta)_e[0]_costheta_-0.67_phi_30",  "cos(theta)_e[0]_costheta_-0.33_phi_30",  "cos(theta)_e[0]_costheta_-0.00_phi_30",  "cos(theta)_e[0]_costheta_0.33_phi_30",  "cos(theta)_e[0]_costheta_0.67_phi_30",
							   "cos(theta)_e[0]_costheta_-1.00_phi_60",  "cos(theta)_e[0]_costheta_-0.67_phi_60",  "cos(theta)_e[0]_costheta_-0.33_phi_60",  "cos(theta)_e[0]_costheta_-0.00_phi_60",  "cos(theta)_e[0]_costheta_0.33_phi_60",  "cos(theta)_e[0]_costheta_0.67_phi_60",
							   "cos(theta)_e[0]_costheta_-1.00_phi_90",  "cos(theta)_e[0]_costheta_-0.67_phi_90",  "cos(theta)_e[0]_costheta_-0.33_phi_90",  "cos(theta)_e[0]_costheta_-0.00_phi_90",  "cos(theta)_e[0]_costheta_0.33_phi_90",  "cos(theta)_e[0]_costheta_0.67_phi_90",
							   "cos(theta)_e[0]_costheta_-1.00_phi_120", "cos(theta)_e[0]_costheta_-0.67_phi_120", "cos(theta)_e[0]_costheta_-0.33_phi_120", "cos(theta)_e[0]_costheta_-0.00_phi_120", "cos(theta)_e[0]_costheta_0.33_phi_120", "cos(theta)_e[0]_costheta_0.67_phi_120",
							   "cos(theta)_e[0]_costheta_-1.00_phi_150", "cos(theta)_e[0]_costheta_-0.67_phi_150", "cos(theta)_e[0]_costheta_-0.33_phi_150", "cos(theta)_e[0]_costheta_-0.00_phi_150", "cos(theta)_e[0]_costheta_0.33_phi_150", "cos(theta)_e[0]_costheta_0.67_phi_150" };

	////9x8
	//TString histlist1D[72] = {  "cos(theta)_e[0]_costheta_-1.00_phi_-180","cos(theta)_e[0]_costheta_-1.00_phi_-135","cos(theta)_e[0]_costheta_-1.00_phi_-90","cos(theta)_e[0]_costheta_-1.00_phi_-45","cos(theta)_e[0]_costheta_-1.00_phi_0","cos(theta)_e[0]_costheta_-1.00_phi_45","cos(theta)_e[0]_costheta_-1.00_phi_90","cos(theta)_e[0]_costheta_-1.00_phi_135",
	//							  "cos(theta)_e[0]_costheta_-0.78_phi_-180","cos(theta)_e[0]_costheta_-0.78_phi_-135","cos(theta)_e[0]_costheta_-0.78_phi_-90","cos(theta)_e[0]_costheta_-0.78_phi_-45","cos(theta)_e[0]_costheta_-0.78_phi_0","cos(theta)_e[0]_costheta_-0.78_phi_45","cos(theta)_e[0]_costheta_-0.78_phi_90","cos(theta)_e[0]_costheta_-0.78_phi_135",
	//							  "cos(theta)_e[0]_costheta_-0.56_phi_-180","cos(theta)_e[0]_costheta_-0.56_phi_-135","cos(theta)_e[0]_costheta_-0.56_phi_-90","cos(theta)_e[0]_costheta_-0.56_phi_-45","cos(theta)_e[0]_costheta_-0.56_phi_0","cos(theta)_e[0]_costheta_-0.56_phi_45","cos(theta)_e[0]_costheta_-0.56_phi_90","cos(theta)_e[0]_costheta_-0.56_phi_135",
	//							  "cos(theta)_e[0]_costheta_-0.11_phi_-180","cos(theta)_e[0]_costheta_-0.11_phi_-135","cos(theta)_e[0]_costheta_-0.11_phi_-90","cos(theta)_e[0]_costheta_-0.11_phi_-45","cos(theta)_e[0]_costheta_-0.11_phi_0","cos(theta)_e[0]_costheta_-0.11_phi_45","cos(theta)_e[0]_costheta_-0.11_phi_90","cos(theta)_e[0]_costheta_-0.11_phi_135",
	//							  "cos(theta)_e[0]_costheta_-0.33_phi_-180","cos(theta)_e[0]_costheta_-0.33_phi_-135","cos(theta)_e[0]_costheta_-0.33_phi_-90","cos(theta)_e[0]_costheta_-0.33_phi_-45","cos(theta)_e[0]_costheta_-0.33_phi_0","cos(theta)_e[0]_costheta_-0.33_phi_45","cos(theta)_e[0]_costheta_-0.33_phi_90","cos(theta)_e[0]_costheta_-0.33_phi_135",
	//							  "cos(theta)_e[0]_costheta_0.11_phi_-180","cos(theta)_e[0]_costheta_0.11_phi_-135","cos(theta)_e[0]_costheta_0.11_phi_-90","cos(theta)_e[0]_costheta_0.11_phi_-45","cos(theta)_e[0]_costheta_0.11_phi_0","cos(theta)_e[0]_costheta_0.11_phi_45","cos(theta)_e[0]_costheta_0.11_phi_90","cos(theta)_e[0]_costheta_0.11_phi_135",
	//							  "cos(theta)_e[0]_costheta_0.33_phi_-180","cos(theta)_e[0]_costheta_0.33_phi_-135","cos(theta)_e[0]_costheta_0.33_phi_-90","cos(theta)_e[0]_costheta_0.33_phi_-45","cos(theta)_e[0]_costheta_0.33_phi_0","cos(theta)_e[0]_costheta_0.33_phi_45","cos(theta)_e[0]_costheta_0.33_phi_90","cos(theta)_e[0]_costheta_0.33_phi_135",
	//							  "cos(theta)_e[0]_costheta_0.55_phi_-180","cos(theta)_e[0]_costheta_0.55_phi_-135","cos(theta)_e[0]_costheta_0.55_phi_-90","cos(theta)_e[0]_costheta_0.55_phi_-45","cos(theta)_e[0]_costheta_0.55_phi_0","cos(theta)_e[0]_costheta_0.55_phi_45","cos(theta)_e[0]_costheta_0.55_phi_90","cos(theta)_e[0]_costheta_0.55_phi_135",
	//							  "cos(theta)_e[0]_costheta_0.78_phi_-180","cos(theta)_e[0]_costheta_0.78_phi_-135","cos(theta)_e[0]_costheta_0.78_phi_-90","cos(theta)_e[0]_costheta_0.78_phi_-45","cos(theta)_e[0]_costheta_0.78_phi_0","cos(theta)_e[0]_costheta_0.78_phi_45","cos(theta)_e[0]_costheta_0.78_phi_90","cos(theta)_e[0]_costheta_0.78_phi_135"};

	////4x4
	//TString histlist1D[16] = {"cos(theta)_e[0]_costheta_-1.00_phi_-180","cos(theta)_e[0]_costheta_-1.00_phi_-90","cos(theta)_e[0]_costheta_-1.00_phi_0","cos(theta)_e[0]_costheta_-1.00_phi_90",
	//						  "cos(theta)_e[0]_costheta_-0.50_phi_-180","cos(theta)_e[0]_costheta_-0.50_phi_-90","cos(theta)_e[0]_costheta_-0.50_phi_0","cos(theta)_e[0]_costheta_-0.50_phi_90",
	//						  "cos(theta)_e[0]_costheta_0.00_phi_-180","cos(theta)_e[0]_costheta_0.00_phi_-90","cos(theta)_e[0]_costheta_0.00_phi_0","cos(theta)_e[0]_costheta_0.00_phi_90",
	//						  "cos(theta)_e[0]_costheta_0.50_phi_-180","cos(theta)_e[0]_costheta_0.50_phi_-90","cos(theta)_e[0]_costheta_0.50_phi_0","cos(theta)_e[0]_costheta_0.50_phi_90"};
	//TString histlist1D[9] = {"cos(theta)_e[0]_costheta_-1.00_phi_-180","cos(theta)_e[0]_costheta_-1.00_phi_-60","cos(theta)_e[0]_costheta_-1.00_phi_60",
	//						  "cos(theta)_e[0]_costheta_-0.33_phi_-180","cos(theta)_e[0]_costheta_-0.33_phi_-60","cos(theta)_e[0]_costheta_-0.33_phi_60",
	//						  "cos(theta)_e[0]_costheta_0.33_phi_-180","cos(theta)_e[0]_costheta_0.33_phi_-60","cos(theta)_e[0]_costheta_0.33_phi_60"};
	
	//TString histlist2D[1] = {"B1_map"};
	//12x6
	TString histlist2D[72] = { "MFPAD3D_engate_costheta_-1.00_phi_-180", "MFPAD3D_engate_costheta_-0.67_phi_-180","MFPAD3D_engate_costheta_-0.33_phi_-180","MFPAD3D_engate_costheta_-0.00_phi_-180", "MFPAD3D_engate_costheta_0.33_phi_-180", "MFPAD3D_engate_costheta_-0.67_phi_-180",
							   "MFPAD3D_engate_costheta_-1.00_phi_-150", "MFPAD3D_engate_costheta_-0.67_phi_-150","MFPAD3D_engate_costheta_-0.33_phi_-150","MFPAD3D_engate_costheta_-0.00_phi_-150", "MFPAD3D_engate_costheta_0.33_phi_-150", "MFPAD3D_engate_costheta_-0.67_phi_-150",
							   "MFPAD3D_engate_costheta_-1.00_phi_-120", "MFPAD3D_engate_costheta_-0.67_phi_-120","MFPAD3D_engate_costheta_-0.33_phi_-120","MFPAD3D_engate_costheta_-0.00_phi_-120", "MFPAD3D_engate_costheta_0.33_phi_-120", "MFPAD3D_engate_costheta_-0.67_phi_-120",
							   "MFPAD3D_engate_costheta_-1.00_phi_-90",	 "MFPAD3D_engate_costheta_-0.67_phi_-90", "MFPAD3D_engate_costheta_-0.33_phi_-90", "MFPAD3D_engate_costheta_-0.00_phi_-90",  "MFPAD3D_engate_costheta_0.33_phi_-90",  "MFPAD3D_engate_costheta_-0.67_phi_-90",
							   "MFPAD3D_engate_costheta_-1.00_phi_-60",	 "MFPAD3D_engate_costheta_-0.67_phi_-60", "MFPAD3D_engate_costheta_-0.33_phi_-60", "MFPAD3D_engate_costheta_-0.00_phi_-60",  "MFPAD3D_engate_costheta_0.33_phi_-60",  "MFPAD3D_engate_costheta_-0.67_phi_-60",
							   "MFPAD3D_engate_costheta_-1.00_phi_-30",	 "MFPAD3D_engate_costheta_-0.67_phi_-30", "MFPAD3D_engate_costheta_-0.33_phi_-30", "MFPAD3D_engate_costheta_-0.00_phi_-30",  "MFPAD3D_engate_costheta_0.33_phi_-30",  "MFPAD3D_engate_costheta_-0.67_phi_-30",
							   "MFPAD3D_engate_costheta_-1.00_phi_0",	 "MFPAD3D_engate_costheta_-0.67_phi_0",   "MFPAD3D_engate_costheta_-0.33_phi_0",   "MFPAD3D_engate_costheta_-0.00_phi_0",    "MFPAD3D_engate_costheta_0.33_phi_0",    "MFPAD3D_engate_costheta_-0.67_phi_0",
							   "MFPAD3D_engate_costheta_-1.00_phi_30",	 "MFPAD3D_engate_costheta_-0.67_phi_30",  "MFPAD3D_engate_costheta_-0.33_phi_30",  "MFPAD3D_engate_costheta_-0.00_phi_30",   "MFPAD3D_engate_costheta_0.33_phi_30",   "MFPAD3D_engate_costheta_-0.67_phi_30",
							   "MFPAD3D_engate_costheta_-1.00_phi_60",	 "MFPAD3D_engate_costheta_-0.67_phi_60",  "MFPAD3D_engate_costheta_-0.33_phi_60",  "MFPAD3D_engate_costheta_-0.00_phi_60",   "MFPAD3D_engate_costheta_0.33_phi_60",   "MFPAD3D_engate_costheta_-0.67_phi_60",
							   "MFPAD3D_engate_costheta_-1.00_phi_90",	 "MFPAD3D_engate_costheta_-0.67_phi_90",  "MFPAD3D_engate_costheta_-0.33_phi_90",  "MFPAD3D_engate_costheta_-0.00_phi_90",   "MFPAD3D_engate_costheta_0.33_phi_90",   "MFPAD3D_engate_costheta_-0.67_phi_90",
							   "MFPAD3D_engate_costheta_-1.00_phi_120",	 "MFPAD3D_engate_costheta_-0.67_phi_120", "MFPAD3D_engate_costheta_-0.33_phi_120", "MFPAD3D_engate_costheta_-0.00_phi_120",  "MFPAD3D_engate_costheta_0.33_phi_120",  "MFPAD3D_engate_costheta_-0.67_phi_120",
							   "MFPAD3D_engate_costheta_-1.00_phi_150",	 "MFPAD3D_engate_costheta_-0.67_phi_150", "MFPAD3D_engate_costheta_-0.33_phi_150", "MFPAD3D_engate_costheta_-0.00_phi_150",  "MFPAD3D_engate_costheta_0.33_phi_150",  "MFPAD3D_engate_costheta_-0.67_phi_150"};



	// canvas strig name, from Till suggestion! Not necessary now.
	const char *cname[] = {"PECD_e[0]_R_CL-CR","PECD_e[0]_S_CL-CR","PECD_e[0]_R_CL-S_CR", "R_CL-CR","S_CL-CR","R_CL-S_CR"};
	const char *cname2D[] = {"PECD_e[0]_R_CL-CR","PECD_e[0]_S_CL-CR","PECD_e[0]_S-R_CL-CR"};
	TCanvas *canv[10]; // dim(3 cos(theta) + 3 b1__maps)
	std::cout << "Vector of TCanvas created." << "\n \n";

	char tempj[250];
	char tempk[250];
	char tempjk[250];

	// LOAD AND NORMALIZED ALL GRAPHS
	load_TH1D(S_LFile, S_RFile, R_LFile, R_RFile, S_LCP_TH1D_Array, S_RCP_TH1D_Array, R_LCP_TH1D_Array, R_RCP_TH1D_Array, general_Array, dirlist, histlist1D, dir);
	std::cout << "load_all TH1D : DONE! \n \n";

	load_TH2D(S_LFile, S_RFile, R_LFile, R_RFile, S_LCP_TH2D_Array, S_RCP_TH2D_Array, R_LCP_TH2D_Array, R_RCP_TH2D_Array, general_Array2D, dirlist, histlist2D, dir);
	std::cout << "load_all TH2D : DONE! \n \n";

	int ratio_counter = 0;

	//generation of phi and cos(theta) 16 bins: be sure that the increment and the incremented variabel is the same at in histlist1D 
	int counter = 0;
	// 12x6 : 12 cos(theta), 6 phi
	for (int i = 0; i < 12; i++) {
		for (int j = 0; j < 6; j++) {
			phi[counter] = i*30-180+15;
			cos_theta[counter] = j*0.333-1+0.1667; // (bin-period/2+bin/2)
			counter++;
		}
	}
	
	//// 4x4
	//for (int i = 0; i < 4; i++) {
	//	for (int j = 0; j < 4; j++) {
	//		cos_theta[counter] = i*0.5-1+0.25; // (bin-period/2+bin/2)
	//		phi[counter] = j*90-180+45;
	//		counter++;
	//	}
	//}

	// 3x3
	//for (int i = 0; i < 3; i++) {
	//	for (int j = 0; j < 3; j++) {
	//		cos_theta[counter] = i*0.667-1+0.33; // (bin-period/2+bin/2)
	//		phi[counter] = j*120-180+60;
	//		counter++;
	//	}
	//}
	
	//3 canvas of i*j plots each cos(theta) + 3 cavas for b1_map
	for (int j = 0; j < 6; j++) {
		if (j < 3) {
			canv[j] = new TCanvas(cname[j], cname[j]);
			canv[j]->SetCanvasSize(1920, 1080);
			canv[j]->SetWindowSize(1920 + 4, 1080 + 28);
			canv[j]->SetBatch(kTRUE); // to suppress graphical putput
			//12x6
			canv[j]->Divide(12, 6);						  
			// 9x8
			//canv[j]->Divide(9, 8);
			//// 4x4
			//canv[j]->Divide(4, 4);
			//// 3x3
			//canv[j]->Divide(3, 3);
			canv[j]->SetFillStyle(4000);
			
			// all cos(theta) -> counter goes for ixj canvas
			//4x4
			//for (int i = 0; i < 16; i++) {
			//3X3
			//for (int i = 0; i < 9; i++) {
			//9X8
			for (int i = 0; i < 72; i++) {
				std::printf(tempj, "clean");
				std::printf(tempk, "clean");
				if (j == 0) { // R enantiomer, different ellicity
					std::printf(tempj, "%s", R_LCP_TH1D_Array[i]->GetTitle());
					std::printf(tempk, "%s", R_RCP_TH1D_Array[i]->GetTitle());
					Working_Array_1[i] = R_LCP_TH1D_Array[i];
					Working_Array_2[i] = R_RCP_TH1D_Array[i];
					//cout << " j = " << j <<" tempj should be R_L and it is  "<< R_LCP_TH1D_Array[i]->GetTitle() << ", tempk R_R and it is  "<< R_RCP_TH1D_Array[i]->GetTitle() << "\n";
				}
				else if (j == 1) {  // S enantiomer, different ellicity
					std::printf(tempj, "%s", S_LCP_TH1D_Array[i]->GetTitle());
					std::printf(tempk, "%s", S_RCP_TH1D_Array[i]->GetTitle());
					Working_Array_1[i] = S_LCP_TH1D_Array[i];
					Working_Array_2[i] = S_RCP_TH1D_Array[i];
					//cout << " j = " << j <<" tempj should be S_L and it is  "<< S_LCP_TH1D_Array[i]->GetTitle() << ", tempk S_R and it is  "<< S_RCP_TH1D_Array[i]->GetTitle() << "\n";
				}
				else if (j == 2){  // DIFFERENT ellicity DIFFERENT enantiomer
					std::printf(tempj, "%s", R_LCP_TH1D_Array[i]->GetTitle());
					std::printf(tempk, "%s", S_RCP_TH1D_Array[i]->GetTitle());
					Working_Array_1[i] = R_LCP_TH1D_Array[i];
					Working_Array_2[i] = S_RCP_TH1D_Array[i];
					//cout << " j = " << j <<" tempj should be R_L and it is  "<< R_LCP_TH1D_Array[i]->GetTitle() << ", tempk S_R and it is  "<< S_RCP_TH1D_Array[i]->GetTitle() << "\n";
				}

				// tempj and tempk taken from Working_Array_2
				std::printf(tempjk, "PECD %s vs. %s - cos(theta) = %2.2f ; phi = %3.0f", tempj, tempk, cos_theta[i], phi[i]);
				TPaveStats *sk = (TPaveStats*)Working_Array_1[i]->GetListOfFunctions()->FindObject("stats");
				sk->SetOptStat(11);

				// ASYMMETY plots
				ratio_genarray[ratio_counter] = ratio_TH1D(Working_Array_1[i], Working_Array_2[i], cname[j]);
				ratio_genarray[ratio_counter]->Fit("pol1", "Q");
				// console output could e annoying: put here a command ti suppress it
				fit1[i] = ratio_genarray[ratio_counter]->GetFunction("pol1");
				b1[ratio_counter] = fit1[i]->GetParameter(1);
				b1_err[ratio_counter] = fit1[i]->GetParError(1);

				if (fp!=NULL) {
					// 12x6
					std::fprintf(fp,"%4.2f \t %4.0f \t %4.8f \t %4.8f \n", cos_theta[i], phi[i], b1[i+j*72], b1_err[i+j*72]);
					//// 4x4
					//fstd::printf(fp,"%4.2f \t %4.0f \t %4.8f \t %4.8f \n", cos_theta[i], phi[i], b1[i+j*16], b1_err[i+j*16]);
					//// 3x3
					//fstd::printf(fp,"%4.2f \t %4.0f \t %4.8f \t %4.8f \n", cos_theta[i], phi[i], b1[i+j*9], b1_err[i+j*9]);
				}

				//plotting b1 with regression curve
				ratio_genarray[ratio_counter]->SetMarkerStyle(20);
				ratio_genarray[ratio_counter]->GetXaxis()->SetTitle("cos(theta)");
				ratio_genarray[ratio_counter]->GetYaxis()->SetTitle("asymm [a.u.]");
				ratio_genarray[ratio_counter]->GetYaxis()->SetRangeUser(0.4, 1.6);
				ratio_genarray[ratio_counter]->SetTitle("");
				//const char* title = ("B1 = " + b1[i]); // example: ratio_genarray[ratio_counter]->SetTitle((const char*)histlist1D[j]);
				//ratio_genarray[ratio_counter]->SetTitle("B1_correct_title_char");
				canv[j]->cd(i+1);
				ratio_genarray[ratio_counter]->Draw("AP");
				fit1[i]->Draw("SAME");

				DrawTextInPad(0.2, 0.93, tempjk, 0.05);
				gStyle->SetOptTitle(0);
				gStyle->SetOptFit();	
				canv[j]->Update();
				
				//// Set the leggend
				//TLegend *leg = canv[i]->cd(counter)->BuildLegend();
				//leg->SetTextFont(30);
				//leg->SetY1NDC(2);
				ratio_counter++;
			}// end of for i
			canv[j]->Write();
			canv[j]->SetBatch(kFALSE); // to suppress graphical putput
			std::printf("plotting and saving cos(theta) canvas %s: DONE! \n \n", cname[j]);
		} //end of if j <3
		

		// output a file with b1_parameter and error in two column!
		//std::printf("saving beta and beta_err file: DONE! \n");

		if (j >= 3) {
			std::printf(tempjk, "b1 map of %s", cname[j]);

			canv[j] = new TCanvas(cname[j], cname[j]);
			//canv[j]->SetCanvasSize(1920, 1080);
			//canv[j]->SetWindowSize(1920 + 4, 1080 + 28);
			canv[j]->SetFillStyle(4000);
			canv[j]->cd();
			
			// 12x6
			b1_map[j-3] = new TGraph2D();
			b1_map[j-3]->SetNpx(12);
			b1_map[j-3]->SetNpy(6);			
			b1_map[j-3]->SetTitle("; phi [DEG]; cos(theta) [adm]; b1 [adm]");
			canv[j]->Update();
			
			////filling b1_maps
			// 12x6
			for (int k = 0; k < 72; k++) //k = all phi and cos(theta) = 12x6
				b1_map[j-3]->SetPoint(k, phi[k], cos_theta[k], b1[k+(j-3)*72]);
			b1_map[j-3]->GetXaxis()->SetRangeUser(-180., 180.); // doesn't work with TGraph2D
			b1_map[j-3]->GetYaxis()->SetRangeUser(-1., 1.);		// doesn't work with TGraph2D
			b1_map[j-3]->GetZaxis()->SetRangeUser(-0.15, 0.15); // doesn't work with TGraph2D
			b1_map[j-3]->Draw("COLZ"); // this will introduce directly the smoothing
			//b1_map[j-3]->Draw("LINE");

			//// 3x3
			//for (int k = 0; k < 9; k++) //k = all phi and cos(theta) = 3x3
			//	b1_map[j-3]->SetPoint(k, phi[k], cos_theta[k], b1[k+(j-3)*9]);
			
			//// 4x4
			//for (int k = 0; k < 16; k++) //k = all phi and cos(theta) = 4x4
			//	b1_map[j-3]->SetPoint(k, phi[k], cos_theta[k], b1[k+(j-3)*16]);

			// final touches: title and legend
			DrawTextInPad(0.32, 0.93, tempjk, 0.05);
			//TLegend *leg = canv[j]->cd()->BuildLegend();
			//leg->SetTextFont(30);
			//leg->SetY1NDC(2);
			gStyle->SetOptTitle(0);
			canv[j]->Update();
			
			canv[j]->Write();
			std::printf("plotting and saving Beta1_maps canvas %s: DONE! \n", cname[j]);
		}
	}

	for (int i = 0; i < 6; i++) { // i < TH1D + TH2D non smoothed
		canv[i] = new TCanvas(cname2D[i], cname[i]); // z + the number of previous canvas TH1D + canvas TH2D + 1 ; cname z + previous names
		canv[i]->SetCanvasSize(1920, 1080);
		canv[i]->SetWindowSize(1920 + 4, 1080 + 28);
		canv[i]->Divide(12, 6);
		canv[i]->SetFillStyle(4000);
		gStyle->SetOptTitle(0);
		int counter_2D = 72;  //(i-2)*4 to return back to the beginning of the array since we processed two PECD graphs
		int ratio_counter_2D = 0;
		for (int j = 0; j < 12; j++) {
			std::printf(tempj, "%s", general_Array2D[j]->GetTitle());
			for (int k = 0; k < 6; k++) {
				std::printf(tempk, "%s", general_Array2D[j]->GetTitle());
				canv[i]->cd(counter_2D);
				ratioTH2D[ratio_counter_2D] = ratio_TH2D(general_Array2D[j], general_Array2D[j], cname[i]);
				//ratioTH2D[ratio_counter_2D]->SetMarkerStyle(20);
				TPaveStats *sk = (TPaveStats*)general_Array2D[j]->GetListOfFunctions()->FindObject("stats");
				//sk->SetOptStat(11);
				ratioTH2D[ratio_counter_2D]->GetZaxis()->SetRangeUser(-0.15, 0.15);
				ratioTH2D[ratio_counter_2D]->SetTitle("");
				//Smooth() : 3 kernels are proposed k5a, k5b and k3a
				ratioTH2D[ratio_counter_2D]->Smooth();
				gStyle->SetPalette(55);
				ratioTH2D[ratio_counter_2D]->Draw("COLZ");
				//ratioTH2D[ratio_counter_2D]->Draw("CONTZ");

				std::printf(tempjk, "%s vs. %s", tempj, tempk);
				DrawTextInPad(0.2, 0.93, tempjk, 0.06);

				canv[j + 7]->Update();

				ratio_counter_2D++;
				counter_2D--;
			}
		}
		canv[i]->Write();
		std::printf("plotting and saving TH2D smoothed canvas %s: DONE! \n \n", cname[i + 6]);
	}


	f->Close();
	std::cout << "gPad : SAVED!" << "\n \n";

	// hard exit with no delete of variable
	exit(0);
	theApp.Run();

	return 0;
}